#include <gtest/gtest.h>
#include <experimental/filesystem>
#include <iostream>
#include <Eigen/Core>
#include <vector>
#include <opencv2/core/core.hpp>
#include <opencv2/highgui/highgui.hpp>
#include <opencv2/imgproc/imgproc.hpp>

#include "face/prnet.h"

namespace {
    using namespace telef::face;
    namespace fs = std::experimental::filesystem;
}

static std::vector<std::vector<float>> image00081 {
        { 73.2692f, 96.8873f, 42.3286f },
        { 76.2616f, 119.0081f, 45.4115f },
        { 81.3065f, 140.3187f, 49.3791f },
        { 83.6196f, 158.0528f, 54.3395f },
        { 86.0423f, 177.7820f, 65.7919f },
        { 89.9787f, 192.5626f, 87.9529f },
        { 95.0993f, 201.5718f, 115.7788f },
        { 106.0571f, 208.1116f, 144.9626f },
        { 128.2499f, 212.7147f, 161.7048f },
        { 154.1707f, 206.4326f, 164.3952f },
        { 182.2867f, 199.4415f, 151.9232f },
        { 204.6274f, 191.6323f, 135.4318f },
        { 220.9111f, 176.7447f, 121.2082f },
        { 229.0499f, 156.5580f, 111.3832f },
        { 232.8292f, 135.2201f, 107.1890f },
        { 236.7563f, 113.1847f, 105.3473f },
        { 239.5854f, 90.3800f, 102.7589f },
        { 69.7435f, 71.0642f, 117.9873f },
        { 74.8347f, 64.4298f, 134.2120f },
        { 84.2673f, 60.6020f, 148.0051f },
        { 94.1058f, 61.6175f, 156.6541f },
        { 103.0433f, 63.9160f, 162.2228f },
        { 144.3768f, 61.5179f, 176.4445f },
        { 154.2357f, 58.2998f, 178.0476f },
        { 167.7518f, 56.4610f, 177.1287f },
        { 184.3725f, 59.1918f, 171.9592f },
        { 197.7534f, 65.3971f, 161.9966f },
        { 122.6941f, 82.5277f, 173.6019f },
        { 120.0692f, 95.7522f, 183.0488f },
        { 117.3139f, 106.9555f, 192.8412f },
        { 116.2318f, 118.1818f, 196.5289f },
        { 108.9541f, 129.7045f, 167.2236f },
        { 113.4343f, 130.6912f, 174.4594f },
        { 121.0851f, 132.2500f, 179.6527f },
        { 128.3305f, 130.3260f, 180.3216f },
        { 136.7496f, 128.8883f, 177.9244f },
        { 82.0667f, 86.1684f, 131.3672f },
        { 87.2688f, 80.8776f, 141.2317f },
        { 96.4986f, 80.6123f, 145.9466f },
        { 106.4610f, 84.4822f, 146.6102f },
        { 97.9549f, 87.9264f, 144.9700f },
        { 87.9703f, 88.4352f, 139.4468f },
        { 149.7220f, 83.5337f, 161.8788f },
        { 158.7342f, 78.2534f, 167.6004f },
        { 169.5655f, 77.8403f, 169.6900f },
        { 179.3230f, 83.1540f, 165.1275f },
        { 169.0301f, 86.0823f, 168.0708f },
        { 157.5983f, 86.4068f, 165.8965f },
        { 96.0865f, 157.7755f, 146.7089f },
        { 102.9483f, 149.6292f, 164.6266f },
        { 114.4672f, 145.3414f, 176.2730f },
        { 121.8915f, 146.2986f, 179.4633f },
        { 127.6549f, 144.9703f, 180.9110f },
        { 144.0935f, 148.1845f, 179.1101f },
        { 159.8028f, 155.3366f, 170.3363f },
        { 142.8338f, 163.2793f, 176.8385f },
        { 132.2218f, 166.2733f, 178.2707f },
        { 122.1181f, 166.7655f, 176.6286f },
        { 111.1136f, 167.3454f, 170.8336f },
        { 104.2103f, 164.9228f, 163.1256f },
        { 98.4386f, 156.9303f, 148.3902f },
        { 112.6775f, 153.1102f, 169.5549f },
        { 122.9377f, 151.7892f, 176.1731f },
        { 132.7446f, 152.1696f, 176.8848f },
        { 158.0094f, 155.6930f, 170.1532f },
        { 131.4757f, 157.0448f, 176.1376f },
        { 122.5223f, 157.4024f, 174.4137f },
        { 112.7879f, 158.0199f, 168.9224f },
};

TEST(PRNetLandmarkDetector, Image00081) {
    PRNetLandmarkDetector prnet(fs::path("../models/prnet.meta"), fs::path("../models/256_256_resfcn256_weight"));

    cv::Mat image = cv::imread("../tests/resources/image00081.png");
    cv::cvtColor(image, image, CV_BGR2RGB);
    cv::Mat floatImage;
    image.convertTo(floatImage, CV_32FC3);
    floatImage /= 255.0f;

    Eigen::MatrixXf result = prnet.Run((float*)floatImage.data);

    for(int i; i<image00081.size(); i++) {
        float gx = image00081[i][0];
        float gy = image00081[i][1];
        float gz = image00081[i][2];

        float x = result(0, i);
        float y = result(1, i);
        float z = result(2, i);

        ASSERT_LE(fabsf(gx-x), 0.1f);
        ASSERT_LE(fabsf(gy-y), 0.1f);
        ASSERT_LE(fabsf(gz-z), 0.1f);
    }
}

